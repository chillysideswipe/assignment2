# Frontend Development

## Responsive Webpage

### HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Webpage</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav class="navbar">Fixed Navbar</nav>
    <div class="content">
        <div class="left-menu">Left Menu</div>
        <div class="main-content">Main Content</div>
        <div class="right-panel">Right Panel</div>
    </div>
    <footer>Footer</footer>
    <script src="script.js"></script>
</body>
</html>
```

### CSS
```css
body {
    margin: 0;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.navbar {
    position: fixed;
    top: 0;
    width: 100%;
    background-color: #333;
    color: white;
    text-align: center;
    padding: 1rem;
}

.content {
    display: flex;
    margin-top: 4rem;
    flex-grow: 1;
}

.left-menu {
    width: 20%;
    background-color: #f4f4f4;
    padding: 1rem;
}

.main-content {
    flex-grow: 1;
    padding: 1rem;
    background-color: #fff;
}

.right-panel {
    width: 20%;
    background-color: #f4f4f4;
    padding: 1rem;
}

footer {
    background-color: #333;
    color: white;
    text-align: center;
    padding: 1rem;
}
```

### JavaScript
```javascript
window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const body = document.body;

    if (width <= 600) {
        body.style.transform = 'scale(0.5)';
    } else if (width <= 700) {
        body.style.transform = 'scale(0.75)';
    } else if (width <= 767) {
        body.style.transform = 'scale(0.8)';
    } else if (width <= 1600) {
        body.style.transform = 'scale(0.9)';
    } else {
        body.style.transform = 'scale(1)';
    }
});
```

# Django Chat Application

### Models
```python
from django.contrib.auth.models import User
from django.db import models

class Message(models.Model):
    sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
    receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
```

### Views
```python
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from .models import Message
from django.contrib.auth.models import User

@login_required
def chat(request):
    users = User.objects.exclude(id=request.user.id)
    return render(request, 'chat.html', {'users': users})
```

### WebSocket Consumer
```python
from channels.generic.websocket import AsyncWebsocketConsumer
import json
from .models import Message

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = f'chat_{self.room_name}'

        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        data = json.loads(text_data)
        message = data['message']

        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message
            }
        )

    async def chat_message(self, event):
        message = event['message']

        await self.send(text_data=json.dumps({
            'message': message
        }))
```

# AWS Lambda

### Add Two Numbers
```python
def lambda_handler(event, context):
    num1 = event['num1']
    num2 = event['num2']
    return {
        'statusCode': 200,
        'body': num1 + num2
    }
```

### Upload to S3
```python
import boto3

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    file_content = event['file_content']
    bucket_name = 'your-bucket-name'
    file_name = event['file_name']

    s3.put_object(Bucket=bucket_name, Key=file_name, Body=file_content)
    return {
        'statusCode': 200,
        'body': 'File uploaded successfully'
    }# Frontend Development

## Responsive Webpage

### HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Webpage</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav class="navbar">Fixed Navbar</nav>
    <div class="content">
        <div class="left-menu">Left Menu</div>
        <div class="main-content">Main Content</div>
        <div class="right-panel">Right Panel</div>
    </div>
    <footer>Footer</footer>
    <script src="script.js"></script>
</body>
</html>
```

### CSS
```css
body {
    margin: 0;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.navbar {
    position: fixed;
    top: 0;
    width: 100%;
    background-color: #333;
    color: white;
    text-align: center;
    padding: 1rem;
}

.content {
    display: flex;
    margin-top: 4rem;
    flex-grow: 1;
}

.left-menu {
    width: 20%;
    background-color: #f4f4f4;
    padding: 1rem;
}

.main-content {
    flex-grow: 1;
    padding: 1rem;
    background-color: #fff;
}

.right-panel {
    width: 20%;
    background-color: #f4f4f4;
    padding: 1rem;
}

footer {
    background-color: #333;
    color: white;
    text-align: center;
    padding: 1rem;
}
```

### JavaScript
```javascript
window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const body = document.body;

    if (width <= 600) {
        body.style.transform = 'scale(0.5)';
    } else if (width <= 700) {
        body.style.transform = 'scale(0.75)';
    } else if (width <= 767) {
        body.style.transform = 'scale(0.8)';
    } else if (width <= 1600) {
        body.style.transform = 'scale(0.9)';
    } else {
        body.style.transform = 'scale(1)';
    }
});
```

# Django Chat Application

### Models
```python
from django.contrib.auth.models import User
from django.db import models

class Message(models.Model):
    sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
    receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
```

### Views
```python
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from .models import Message
from django.contrib.auth.models import User

@login_required
def chat(request):
    users = User.objects.exclude(id=request.user.id)
    return render(request, 'chat.html', {'users': users})
```

### WebSocket Consumer
```python
from channels.generic.websocket import AsyncWebsocketConsumer
import json
from .models import Message

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = f'chat_{self.room_name}'

        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        data = json.loads(text_data)
        message = data['message']

        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message
            }
        )

    async def chat_message(self, event):
        message = event['message']

        await self.send(text_data=json.dumps({
            'message': message
        }))
```

# AWS Lambda

### Add Two Numbers
```python
def lambda_handler(event, context):
    num1 = event['num1']
    num2 = event['num2']
    return {
        'statusCode': 200,
        'body': num1 + num2
    }
```

### Upload to S3
```python
import boto3

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    file_content = event['file_content']
    bucket_name = 'your-bucket-name'
    file_name = event['file_name']

    s3.put_object(Bucket=bucket_name, Key=file_name, Body=file_content)
    return {
        'statusCode': 200,
        'body': 'File uploaded successfully'
    }
